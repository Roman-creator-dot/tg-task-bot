import asyncio
import os
import sys
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from sqlalchemy import text
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from reminders.weekly import start_reminders
from db.base import init_db, async_session_maker
from bot.handlers import register_handlers
from bot.reactions import router as reaction_router


if sys.platform.startswith('win'):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
print(f"BOT_TOKEN: {BOT_TOKEN}")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
ID_CHAT = os.getenv("CHAT_ID")
print(f"ID_CHAT: {ID_CHAT}")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —á–∞—Ç–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())



dp.include_router(reaction_router)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
register_handlers(dp)



# –ü—Ä–æ—Å—Ç–æ–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
#@dp.message()
#async def echo_all_messages(message: types.Message):
#    print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
#    await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")

async def main():
    await init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å Polling ‚úÖ")
    scheduler = AsyncIOScheduler(timezone="Europe/Belgrade")  # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    start_reminders(scheduler, bot, async_session_maker)
    await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫ polling

if __name__ == "__main__":
    asyncio.run(main())
