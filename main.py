import asyncio
import os
import sys
from multiprocessing import Process
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from sqlalchemy import text
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from reminders.weekly import start_reminders
from db.base import init_db, async_session_maker
from bot.handlers import register_handlers
from bot.reactions import router as reaction_router
from fastapi import FastAPI
import uvicorn

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Windows loop (–µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ)
if sys.platform.startswith('win'):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# ‚úÖ FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Render
app = FastAPI()

@app.get("/")
async def root():
    return {"status": "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"}

# ‚úÖ –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ FastAPI
def run_fastapi():
    port = int(os.environ.get("PORT", 10000))
    # "main:app" ‚Äî —É–∫–∞–∑—ã–≤–∞–µ—Ç FastAPI, –≥–¥–µ –∏—Å–∫–∞—Ç—å –æ–±—ä–µ–∫—Ç app
    uvicorn.run("main:app", host="0.0.0.0", port=port, log_level="info")

# ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π async-—Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    load_dotenv()

    BOT_TOKEN = os.getenv("BOT_TOKEN")
    CHAT_ID = os.getenv("CHAT_ID")

    print(f"BOT_TOKEN: {BOT_TOKEN}")
    print(f"CHAT_ID: {CHAT_ID}")

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.include_router(reaction_router)
    register_handlers(dp)

    await init_db()
    print("‚úÖ Polling –∑–∞–ø—É—â–µ–Ω")

    scheduler = AsyncIOScheduler(timezone="Europe/Belgrade")
    start_reminders(scheduler, bot, async_session_maker)

    await dp.start_polling(bot)

# ‚úÖ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    # üü° –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    Process(target=run_fastapi).start()
    # üü¢ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π event loop –¥–ª—è –±–æ—Ç–∞
    asyncio.run(main())
